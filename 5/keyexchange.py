import base64

from Crypto.Util.number import long_to_bytes, bytes_to_long
from Crypto.Random.random import randint

P = bytes_to_long(bytes([
    0xA5, 0x2F, 0xDA, 0xC8, 0xF2, 0xC7, 0x27, 0xFA, 0xAE, 0xA0, 0x19, 0x87,
    0xB5, 0xA9, 0x81, 0xB5, 0xBE, 0x0D, 0x29, 0x84, 0x17, 0x1A, 0x86, 0xE8,
    0x1B, 0xC6, 0x91, 0x40, 0x98, 0xE1, 0xC5, 0x4E, 0xDE, 0xCE, 0x42, 0x85,
    0x15, 0x28, 0x33, 0x09, 0xE0, 0x38, 0x26, 0x1B, 0x95, 0x52, 0xD3, 0xF9,
    0xCA, 0xF5, 0x80, 0xC7, 0x3E, 0xCE, 0xBD, 0x97, 0x36, 0xB1, 0x7F, 0x33,
    0x16, 0x57, 0xA2, 0x94, 0xAD, 0xD8, 0x4B, 0xC1, 0xA6, 0x21, 0xD8, 0x7F,
    0x4D, 0xF8, 0x8C, 0x4A, 0x70, 0x29, 0x4C, 0x2F, 0x21, 0x87, 0x66, 0xB5,
    0x59, 0xB4, 0x02, 0x41, 0x03, 0x10, 0x6C, 0x30, 0x54, 0x96, 0x4F, 0x63,
    0x37, 0xB3, 0xF8, 0xA6, 0x30, 0x29, 0xE2, 0xAB, 0xB8, 0x9E, 0x13, 0xD5,
    0x27, 0x15, 0xF4, 0x37, 0x25, 0xB6, 0x97, 0x04, 0x33, 0x7B, 0xE7, 0x3E,
    0x9C, 0x67, 0x1F, 0x85, 0x31, 0x89, 0x81, 0xCB, 0x7B, 0x53, 0x2B, 0x38,
    0xE9, 0x3D, 0x97, 0xA5, 0xE7, 0x7D, 0x8C, 0xCF, 0x27, 0xC9, 0xD3, 0xCB,
    0xF7, 0x8D, 0x07, 0x8F, 0xFA, 0x6B, 0x07, 0x8B, 0x6D, 0x67, 0xBE, 0x00,
    0x29, 0x16, 0x11, 0x0B, 0xA8, 0x7A, 0xCB, 0x6B, 0x8A, 0x8B, 0xBE, 0xCC,
    0x66, 0xBB, 0x47, 0x39, 0x38, 0x31, 0x05, 0xE4, 0x45, 0xC8, 0xA2, 0x2E,
    0x83, 0xA3, 0xAA, 0x1C, 0x30, 0x73, 0x89, 0xB8, 0x4C, 0x6E, 0x3C, 0x6D,
    0x30, 0x04, 0x07, 0xE2, 0x68, 0x3C, 0x54, 0xEC, 0x43, 0x5F, 0x1A, 0xA3,
    0x26, 0x89, 0xB0, 0xD1, 0xC8, 0x6F, 0xF4, 0x71, 0xD8, 0xC8, 0x81, 0xA1,
    0xBA, 0xEB, 0x3A, 0x10, 0x7B, 0xEF, 0xBE, 0xE4, 0x4A, 0xCA, 0xF0, 0x49,
    0x9F, 0x47, 0x51, 0x44, 0x2C, 0x88, 0xD6, 0x4B, 0x40, 0x57, 0xE5, 0x0D,
    0xA1, 0xBB, 0x58, 0x50, 0xFB, 0xC9, 0xCD, 0x72, 0xDB, 0x05, 0xDE, 0x89,
    0xCD, 0x0D, 0xA7, 0xF2, 0x52, 0x9D, 0xBA, 0xAD, 0x9B, 0xB0, 0x67, 0x1C,
    0x49, 0x02, 0x94, 0x90, 0x49, 0xD2, 0x86, 0xC1, 0x3F, 0xF7, 0x92, 0x14,
    0x48, 0x00, 0xB7, 0xDA, 0xAD, 0xDC, 0xCA, 0x56, 0xFF, 0x7D, 0x1D, 0xA4,
    0xD3, 0xA9, 0x91, 0x94, 0x43, 0xF7, 0x07, 0x28, 0x89, 0xA2, 0x8C, 0x46,
    0xBB, 0xF6, 0x4C, 0xA9, 0x4A, 0xA1, 0x51, 0x19, 0x2A, 0x7C, 0x20, 0xC1,
    0xB1, 0xA5, 0x82, 0xD7, 0x3C, 0xC0, 0x00, 0x9E, 0x29, 0x83, 0xCB, 0x57,
    0x54, 0xBB, 0x18, 0xA5, 0x85, 0x0D, 0x8E, 0x35, 0x8F, 0x5E, 0x8F, 0xB9,
    0x5C, 0x20, 0xE0, 0x9C, 0x87, 0x15, 0x95, 0xE4, 0x52, 0x2C, 0x25, 0x9B,
    0x44, 0x6D, 0x6D, 0x4D, 0x72, 0xFF, 0xF0, 0xD7, 0x4A, 0x59, 0xDA, 0x25,
    0xCE, 0x42, 0x9C, 0x89, 0x15, 0xE3, 0x79, 0x42, 0x1C, 0x99, 0xA9, 0x09,
    0xA0, 0x47, 0x68, 0x52, 0x8A, 0x9B, 0xCC, 0x32, 0x9C, 0x88, 0x70, 0x55,
    0x36, 0xD0, 0x6E, 0xE7, 0xC5, 0x17, 0x25, 0x29, 0x8C, 0xC9, 0x97, 0x5D,
    0x30, 0x84, 0xF5, 0x2D, 0x23, 0x37, 0x04, 0xCC, 0x93, 0x90, 0x3E, 0xEF,
    0x16, 0xF8, 0x6C, 0xA3, 0xEE, 0x6B, 0x81, 0xDD, 0xBB, 0xDC, 0xF6, 0xEC,
    0x9D, 0xE7, 0xBC, 0x17, 0xCB, 0x27, 0x2D, 0x8F, 0x9B, 0x9D, 0x1A, 0x0F,
    0x1E, 0xAA, 0xF3, 0x1F, 0xA3, 0x46, 0x9A, 0xA4, 0x99, 0x41, 0x13, 0xA8,
    0xF8, 0xF4, 0x93, 0xCD, 0x39, 0xA2, 0xE0, 0xDE, 0x8B, 0x93, 0x3F, 0x50,
    0x81, 0x79, 0x29, 0xC3, 0x40, 0x94, 0x42, 0x16, 0x4A, 0x95, 0x0B, 0xDF,
    0x9E, 0x43, 0x22, 0x30, 0xB6, 0xA7, 0xC6, 0x01, 0x62, 0xD5, 0xAE, 0x4E,
    0x98, 0x2C, 0xD5, 0xA0, 0x62, 0x73, 0xEA, 0x86, 0x03, 0x79, 0x8A, 0x1B,
    0x66, 0x7B, 0x5D, 0x1F, 0x1F, 0x80, 0xA1, 0x9A, 0x9E, 0x97, 0x73, 0x92,
    0xDF, 0xAF, 0x85, 0xC3, 0xD4, 0x28, 0x0E, 0x9B,
]))

G = bytes_to_long(bytes([
    0x84, 0xAD, 0x30, 0x1E, 0x3B, 0x07, 0x7B, 0x5B, 0x3C, 0x06, 0x73, 0x99,
    0xE7, 0x05, 0x0A, 0x17, 0xBB, 0x94, 0x04, 0x4B, 0x95, 0x02, 0xAC, 0xD7,
    0xC7, 0x0F, 0x8C, 0xE7, 0x06, 0x0C, 0x1A, 0x06, 0x9F, 0xE5, 0x86, 0xDB,
    0xD8, 0xED, 0xA1, 0xC3, 0x13, 0xBC, 0xE3, 0x00, 0x3C, 0x20, 0xB5, 0x65,
    0xD0, 0x24, 0x93, 0x6D, 0x84, 0xC4, 0x2F, 0x50, 0x21, 0xDD, 0x80, 0x8D,
    0x5F, 0x59, 0x03, 0xC1, 0x72, 0xFC, 0xEB, 0x11, 0x1C, 0xFC, 0xD5, 0x53,
    0xD2, 0xD8, 0x58, 0x92, 0xB5, 0x3E, 0x37, 0x65, 0x42, 0xCB, 0xBC, 0x3C,
    0x50, 0x59, 0x88, 0x74, 0xB5, 0x06, 0xD2, 0x22, 0xF1, 0x0B, 0x7E, 0xC2,
    0x41, 0x7F, 0x07, 0x5D, 0xB3, 0x89, 0x92, 0x2A, 0xCE, 0x03, 0x39, 0x55,
    0xB3, 0xB2, 0x9D, 0xF8, 0x6E, 0x87, 0xE1, 0x60, 0x97, 0x11, 0x3E, 0xF8,
    0x23, 0xD6, 0xDA, 0xC8, 0x90, 0xEC, 0x92, 0x5E, 0x01, 0x00, 0xF8, 0xA4,
    0x33, 0xEE, 0x2D, 0x67, 0x6E, 0x27, 0x0F, 0xB7, 0x05, 0x17, 0x0A, 0x02,
    0x2C, 0xEB, 0xF9, 0xD4, 0x3B, 0x1C, 0x22, 0x39, 0x9C, 0xF0, 0xA9, 0x01,
    0xE4, 0xD5, 0xBE, 0x95, 0x2B, 0x2D, 0xBB, 0x3A, 0x7A, 0x29, 0x40, 0x8F,
    0x27, 0xC7, 0x6F, 0x37, 0xC9, 0x08, 0xF7, 0xAC, 0xF5, 0xC5, 0x15, 0x0A,
    0xDF, 0x1F, 0xF8, 0x4A, 0xDC, 0x9A, 0xE7, 0x74, 0xEC, 0xC1, 0x76, 0x51,
    0x3A, 0xEE, 0xE5, 0x0E, 0xEB, 0xC7, 0x61, 0x33, 0x9C, 0x30, 0x88, 0x24,
    0x1A, 0xC2, 0xD7, 0xEE, 0xC4, 0x8E, 0xF4, 0xF0, 0xFA, 0x02, 0x49, 0xF7,
    0xEA, 0x64, 0xFA, 0xDA, 0x64, 0x90, 0xCD, 0xAC, 0x89, 0x6A, 0x92, 0xE9,
    0x3D, 0x59, 0xE7, 0x2E, 0xE3, 0x9C, 0x5C, 0x4F, 0x5A, 0x97, 0xFE, 0xBE,
    0x7F, 0x0D, 0xBE, 0xB6, 0xF3, 0x26, 0x49, 0xBF, 0x2B, 0x26, 0x6A, 0xCA,
    0xAB, 0x16, 0x5C, 0x87, 0x00, 0xAB, 0x51, 0x54, 0x33, 0x7C, 0xE7, 0x20,
    0x89, 0x19, 0x39, 0x53, 0x96, 0x4C, 0xF4, 0x03, 0xF1, 0xC0, 0xA3, 0x4B,
    0x67, 0xEE, 0x80, 0xE6, 0x22, 0x9D, 0xE1, 0x5C, 0x57, 0x0D, 0x6F, 0x36,
    0x63, 0xA7, 0x80, 0x3C, 0x21, 0x90, 0x15, 0x52, 0x36, 0x4C, 0x1F, 0x70,
    0x28, 0xBA, 0xFE, 0x43, 0xE1, 0xAB, 0xEA, 0x77, 0x75, 0xD7, 0x9C, 0xDC,
    0x33, 0x8D, 0x11, 0xF1, 0x02, 0x00, 0x21, 0x15, 0xDF, 0xF3, 0x3B, 0x40,
    0x3D, 0x02, 0x4A, 0x4B, 0x67, 0x3B, 0x8D, 0xB2, 0x4C, 0x7D, 0x06, 0x33,
    0x8E, 0x0E, 0x17, 0x73, 0xB4, 0xF1, 0xDF, 0x9F, 0x10, 0x22, 0xF2, 0x85,
    0xAA, 0x8F, 0x91, 0xF7, 0x9D, 0x01, 0x21, 0x9C, 0xA8, 0xF9, 0x2A, 0x0E,
    0x26, 0x28, 0xF6, 0x77, 0x4D, 0x72, 0x36, 0xB8, 0xE0, 0xD4, 0x60, 0xB9,
    0x73, 0x67, 0x7D, 0x19, 0x25, 0x7F, 0x69, 0xA8, 0x5F, 0xAE, 0xBB, 0x8D,
    0x86, 0x76, 0x2E, 0x24, 0xE3, 0xA8, 0x91, 0xFE, 0xD0, 0xA3, 0x79, 0x27,
    0x82, 0x8D, 0xEE, 0x01, 0xFC, 0xF3, 0xDC, 0xEF, 0x01, 0xF0, 0x38, 0x46,
    0xAF, 0x01, 0x54, 0xD1, 0xA5, 0x54, 0x62, 0xEC, 0xA5, 0xE7, 0x44, 0xEA,
    0xDC, 0x7B, 0x0F, 0x7E, 0x3D, 0xA0, 0x22, 0x8C, 0x2A, 0xB8, 0x10, 0xEE,
    0x74, 0x59, 0x56, 0xFE, 0x9D, 0xB9, 0x57, 0x88, 0x17, 0xE1, 0x89, 0x29,
    0xE8, 0xC9, 0xF3, 0x85, 0x49, 0x34, 0x02, 0x2D, 0xA5, 0x87, 0x0B, 0x28,
    0x03, 0x41, 0x11, 0x94, 0x6C, 0x5B, 0x98, 0x9B, 0xD8, 0x21, 0x11, 0xDC,
    0xB8, 0x7C, 0xF2, 0x01, 0x48, 0x42, 0x41, 0x45, 0x41, 0xBB, 0xD3, 0x37,
    0xD5, 0xE8, 0xD7, 0x18, 0xEB, 0xA2, 0xFA, 0x27, 0x4C, 0x79, 0xC2, 0x6C,
    0x38, 0xA3, 0x99, 0x8B, 0xDE, 0xF4, 0xF7, 0x0D, 0x2E, 0xB1, 0x12, 0xA5,
    0x5D, 0x80, 0xBB, 0xCB, 0x4E, 0x4C, 0xC2, 0xD7,
]))

class DiffieHellman(object):
    def __init__(self):
        self.private = randint(0, P-1)
        self.public = pow(G, self.private, P)

    def get_public(self):
        return {'public': str(base64.encodebytes(long_to_bytes(self.public)), 'utf8')}

    def compute_shared_secret(self, partner_public):
        public = bytes_to_long(base64.decodebytes(partner_public['public'].encode()))
        return self._compute_shared_secret(public)

    def _compute_shared_secret(self, partner_public):
        return long_to_bytes(pow(partner_public, self.private, P))
